// <auto-generated />
using System;
using FastFrame.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FastFrame.Database.Migrations
{
    [DbContext(typeof(DataBase))]
    [Migration("20190708102626_190708.1")]
    partial class _1907081
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FastFrame.Entity.Basis.Dept", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasColumnName("encode")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("GenderArray")
                        .HasColumnName("genderarray");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Super_Id")
                        .HasColumnName("super_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Supervisor_Id")
                        .HasColumnName("supervisor_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("TypeIdArray")
                        .HasColumnName("typeidarray");

                    b.Property<bool>("isdeleted");

                    b.Property<string>("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_Dept_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_Dept_Modify_User_Id");

                    b.HasIndex("Super_Id")
                        .HasName("Index_Dept_Super_Id");

                    b.HasIndex("Supervisor_Id")
                        .HasName("Index_Dept_Supervisor_Id");

                    b.ToTable("basis_dept");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.DeptMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Dept_Id")
                        .IsRequired()
                        .HasColumnName("dept_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("IsManager")
                        .HasColumnName("ismanager");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Dept_Id")
                        .HasName("Index_DeptMember_Dept_Id");

                    b.HasIndex("User_Id")
                        .HasName("Index_DeptMember_User_Id");

                    b.ToTable("basis_deptmember");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.EnumItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Super_Id")
                        .HasColumnName("super_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted");

                    b.Property<string>("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_EnumItem_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_EnumItem_Modify_User_Id");

                    b.HasIndex("Super_Id")
                        .HasName("Index_EnumItem_Super_Id");

                    b.ToTable("basis_enumitem");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Meidia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("ContentType")
                        .HasColumnName("contenttype")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Href")
                        .HasColumnName("href")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<bool>("IsFolder")
                        .HasColumnName("isfolder");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Parent_Id")
                        .HasColumnName("parent_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Resource_Id")
                        .HasColumnName("resource_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted");

                    b.Property<string>("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_Meidia_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_Meidia_Modify_User_Id");

                    b.HasIndex("Parent_Id")
                        .HasName("Index_Meidia_Parent_Id");

                    b.HasIndex("Resource_Id")
                        .HasName("Index_Meidia_Resource_Id");

                    b.ToTable("basis_meidia");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Notify", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasMaxLength(8000)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Publush_Id")
                        .HasColumnName("publush_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Resource_Id")
                        .HasColumnName("resource_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Type_Id")
                        .HasColumnName("type_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted");

                    b.Property<string>("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_Notify_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_Notify_Modify_User_Id");

                    b.HasIndex("Publush_Id")
                        .HasName("Index_Notify_Publush_Id");

                    b.HasIndex("Resource_Id")
                        .HasName("Index_Notify_Resource_Id");

                    b.HasIndex("Type_Id")
                        .HasName("Index_Notify_Type_Id");

                    b.ToTable("basis_notify");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.NotifyTarget", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("HaveRead")
                        .HasColumnName("haveread");

                    b.Property<string>("Notify_Id")
                        .IsRequired()
                        .HasColumnName("notify_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("To_Id")
                        .HasColumnName("to_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Notify_Id")
                        .HasName("Index_NotifyTarget_Notify_Id");

                    b.HasIndex("To_Id")
                        .HasName("Index_NotifyTarget_To_Id");

                    b.ToTable("basis_notifytarget");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnName("areaname")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasColumnName("encode")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Super_Id")
                        .HasColumnName("super_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("Super_Id")
                        .HasName("Index_Permission_Super_Id");

                    b.ToTable("basis_permission");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("ContentType")
                        .HasColumnName("contenttype")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("MD5")
                        .HasColumnName("md5")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<long>("Size")
                        .HasColumnName("size");

                    b.Property<string>("tenant_id");

                    b.HasKey("Id");

                    b.ToTable("basis_resource");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasColumnName("encode")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted");

                    b.Property<string>("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_Role_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_Role_Modify_User_Id");

                    b.ToTable("basis_role");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.RoleMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Role_Id")
                        .IsRequired()
                        .HasColumnName("role_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Role_Id")
                        .HasName("Index_RoleMember_Role_Id");

                    b.HasIndex("User_Id")
                        .HasName("Index_RoleMember_User_Id");

                    b.ToTable("basis_rolemember");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.RolePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Permission_Id")
                        .IsRequired()
                        .HasColumnName("permission_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Role_Id")
                        .IsRequired()
                        .HasColumnName("role_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Permission_Id")
                        .HasName("Index_RolePermission_Permission_Id");

                    b.HasIndex("Role_Id")
                        .HasName("Index_RolePermission_Role_Id");

                    b.ToTable("basis_rolepermission");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("CanHaveChildren")
                        .HasColumnName("canhavechildren");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("fullname")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("HandIcon_Id")
                        .HasColumnName("handicon_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Parent_Id")
                        .HasColumnName("parent_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnName("shortname")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("UrlMark")
                        .HasColumnName("urlmark")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted");

                    b.HasKey("Id");

                    b.HasIndex("HandIcon_Id")
                        .HasName("Index_Tenant_HandIcon_Id");

                    b.HasIndex("Parent_Id")
                        .HasName("Index_Tenant_Parent_Id");

                    b.ToTable("basis_tenant");

                    b.HasData(
                        new
                        {
                            Id = "00F6P5G2VC2SAP1UJV7HTBYGU",
                            CanHaveChildren = true,
                            FullName = "默认组织",
                            Parent_Id = "",
                            ShortName = "default",
                            isdeleted = false
                        });
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.TenantHost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnName("host")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("Tenant_Id")
                        .IsRequired()
                        .HasColumnName("tenant_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Tenant_Id")
                        .HasName("Index_TenantHost_Tenant_Id");

                    b.ToTable("basis_tenanthost");

                    b.HasData(
                        new
                        {
                            Id = "00F6P5G2VC2SAP1UJV7HTBYGB",
                            Host = "192.168.1.100:8081",
                            Tenant_Id = "00F6P5G2VC2SAP1UJV7HTBYGU"
                        },
                        new
                        {
                            Id = "00F6P5G2VC2SAP1UJV7HTBYGc",
                            Host = "192.168.1.100:82",
                            Tenant_Id = "00F6P5G2VC2SAP1UJV7HTBYGU"
                        });
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("account")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("EncryptionKey")
                        .IsRequired()
                        .HasColumnName("encryptionkey")
                        .HasMaxLength(36)
                        .IsUnicode(true);

                    b.Property<string>("HandIcon_Id")
                        .HasColumnName("handicon_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("IsAdmin")
                        .HasColumnName("isadmin");

                    b.Property<bool>("IsDisabled")
                        .HasColumnName("isdisabled");

                    b.Property<bool>("IsRoot")
                        .HasColumnName("isroot");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phonenumber")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted");

                    b.Property<string>("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_User_Create_User_Id");

                    b.HasIndex("HandIcon_Id")
                        .HasName("Index_User_HandIcon_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_User_Modify_User_Id");

                    b.ToTable("basis_user");

                    b.HasData(
                        new
                        {
                            Id = "00F6P5G2VC2SAP1UJV7HTBYGA",
                            Account = "admin",
                            CreateTime = new DateTime(2019, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Create_User_Id = "00F6P5G2VC2SAP1UJV7HTBYGA",
                            Email = "gongjie@qq.com",
                            EncryptionKey = "0ee3dcf0e832334f63876a30b45fdece",
                            IsAdmin = true,
                            IsDisabled = false,
                            IsRoot = true,
                            ModifyTime = new DateTime(2019, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modify_User_Id = "00F6P5G2VC2SAP1UJV7HTBYGA",
                            Name = "超级管理员",
                            Password = "123456",
                            PhoneNumber = "18675517757",
                            isdeleted = false,
                            tenant_id = "00F6P5G2VC2SAP1UJV7HTBYGU"
                        });
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.Email", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FromUser_Id")
                        .HasColumnName("fromuser_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Replay_Email_Id")
                        .HasColumnName("replay_email_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Tenant_Id")
                        .HasColumnName("tenant_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("tenant_id")
                        .HasColumnName("Email_tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("FromUser_Id")
                        .HasName("Index_Email_FromUser_Id");

                    b.HasIndex("Replay_Email_Id")
                        .HasName("Index_Email_Replay_Email_Id");

                    b.HasIndex("Tenant_Id")
                        .HasName("Index_Email_Tenant_Id");

                    b.ToTable("chat_email");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.EmailAnnex", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Email_Id")
                        .HasColumnName("email_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Resource_Id")
                        .HasColumnName("resource_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Email_Id")
                        .HasName("Index_EmailAnnex_Email_Id");

                    b.HasIndex("Resource_Id")
                        .HasName("Index_EmailAnnex_Resource_Id");

                    b.ToTable("chat_emailannex");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.EmailContent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .IsUnicode(true);

                    b.Property<string>("Email_Id")
                        .HasColumnName("email_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Email_Id")
                        .HasName("Index_EmailContent_Email_Id");

                    b.ToTable("chat_emailcontent");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.EmailTarget", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasMaxLength(100);

                    b.Property<string>("Email_Id")
                        .HasColumnName("email_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("HaveRead")
                        .HasColumnName("haveread");

                    b.Property<string>("To_Id")
                        .HasColumnName("to_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Email_Id")
                        .HasName("Index_EmailTarget_Email_Id");

                    b.HasIndex("To_Id")
                        .HasName("Index_EmailTarget_To_Id");

                    b.ToTable("chat_emailtarget");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.FriendMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasMaxLength(100);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("From_Id")
                        .HasColumnName("from_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("MessageTime")
                        .HasColumnName("messagetime");

                    b.Property<string>("Resource_Id")
                        .HasColumnName("resource_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Tenant_Id")
                        .HasColumnName("tenant_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("tenant_id")
                        .HasColumnName("FriendMessage_tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("From_Id")
                        .HasName("Index_FriendMessage_From_Id");

                    b.HasIndex("Resource_Id")
                        .HasName("Index_FriendMessage_Resource_Id");

                    b.HasIndex("Tenant_Id")
                        .HasName("Index_FriendMessage_Tenant_Id");

                    b.ToTable("chat_friendmessage");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("HandIcon_Id")
                        .HasColumnName("handicon_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("LordUser_Id")
                        .HasColumnName("lorduser_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Summary")
                        .HasColumnName("summary")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted");

                    b.Property<string>("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_Group_Create_User_Id");

                    b.HasIndex("HandIcon_Id")
                        .HasName("Index_Group_HandIcon_Id");

                    b.HasIndex("LordUser_Id")
                        .HasName("Index_Group_LordUser_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_Group_Modify_User_Id");

                    b.ToTable("chat_group");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.GroupManager", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Group_Id")
                        .HasColumnName("group_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("User_Id")
                        .HasColumnName("user_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Group_Id")
                        .HasName("Index_GroupManager_Group_Id");

                    b.HasIndex("User_Id")
                        .HasName("Index_GroupManager_User_Id");

                    b.ToTable("chat_groupmanager");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.GroupMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasMaxLength(100);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("From_Id")
                        .HasColumnName("from_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Group_Id")
                        .HasColumnName("group_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("MessageTime")
                        .HasColumnName("messagetime");

                    b.Property<string>("Resource_Id")
                        .HasColumnName("resource_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Tenant_Id")
                        .HasColumnName("tenant_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("tenant_id")
                        .HasColumnName("GroupMessage_tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("From_Id")
                        .HasName("Index_GroupMessage_From_Id");

                    b.HasIndex("Group_Id")
                        .HasName("Index_GroupMessage_Group_Id");

                    b.HasIndex("Resource_Id")
                        .HasName("Index_GroupMessage_Resource_Id");

                    b.HasIndex("Tenant_Id")
                        .HasName("Index_GroupMessage_Tenant_Id");

                    b.ToTable("chat_groupmessage");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.MessageTarget", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("HaveRead")
                        .HasColumnName("haveread");

                    b.Property<string>("Message_Id")
                        .HasColumnName("message_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("To_Id")
                        .HasColumnName("to_id")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Message_Id")
                        .HasName("Index_MessageTarget_Message_Id");

                    b.HasIndex("To_Id")
                        .HasName("Index_MessageTarget_To_Id");

                    b.ToTable("chat_messagetarget");
                });
#pragma warning restore 612, 618
        }
    }
}
