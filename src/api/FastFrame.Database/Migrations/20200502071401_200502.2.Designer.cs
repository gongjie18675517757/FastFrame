// <auto-generated />
using System;
using FastFrame.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FastFrame.Database.Migrations
{
    [DbContext(typeof(DataBase))]
    [Migration("20200502071401_200502.2")]
    partial class _2005022
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FastFrame.Entity.Basis.Dept", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasColumnName("encode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Super_Id")
                        .HasColumnName("super_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_Dept_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_Dept_Modify_User_Id");

                    b.HasIndex("Super_Id")
                        .HasName("Index_Dept_Super_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_Dept_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_Dept_tenant_id");

                    b.ToTable("basis_dept");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.DeptMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Dept_Id")
                        .IsRequired()
                        .HasColumnName("dept_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("IsManager")
                        .HasColumnName("ismanager")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Dept_Id")
                        .HasName("Index_DeptMember_Dept_Id");

                    b.HasIndex("User_Id")
                        .HasName("Index_DeptMember_User_Id");

                    b.ToTable("basis_deptmember");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.EnumItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Super_Id")
                        .HasColumnName("super_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_EnumItem_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_EnumItem_Modify_User_Id");

                    b.HasIndex("Super_Id")
                        .HasName("Index_EnumItem_Super_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_EnumItem_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_EnumItem_tenant_id");

                    b.ToTable("basis_enumitem");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.LoginLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnName("expiredtime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("isenabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastTime")
                        .HasColumnName("lasttime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnName("logintime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("User_Id")
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("User_Id")
                        .HasName("Index_LoginLog_User_Id");

                    b.HasIndex("tenant_id")
                        .HasName("Index_LoginLog_tenant_id");

                    b.ToTable("basis_loginlog");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Meidia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("IsFolder")
                        .HasColumnName("isfolder")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Resource_Id")
                        .HasColumnName("resource_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Super_Id")
                        .HasColumnName("super_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_Meidia_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_Meidia_Modify_User_Id");

                    b.HasIndex("Resource_Id")
                        .HasName("Index_Meidia_Resource_Id");

                    b.HasIndex("Super_Id")
                        .HasName("Index_Meidia_Super_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_Meidia_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_Meidia_tenant_id");

                    b.ToTable("basis_meidia");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Notify", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(8000)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Publush_Id")
                        .HasColumnName("publush_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Resource_Id")
                        .HasColumnName("resource_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Type_Id")
                        .HasColumnName("type_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_Notify_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_Notify_Modify_User_Id");

                    b.HasIndex("Publush_Id")
                        .HasName("Index_Notify_Publush_Id");

                    b.HasIndex("Resource_Id")
                        .HasName("Index_Notify_Resource_Id");

                    b.HasIndex("Type_Id")
                        .HasName("Index_Notify_Type_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_Notify_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_Notify_tenant_id");

                    b.ToTable("basis_notify");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.NumberOption", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("BeModule")
                        .IsRequired()
                        .HasColumnName("bemodule")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("DateField")
                        .HasColumnName("datefield")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("DateFieldText")
                        .HasColumnName("datefieldtext")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FmtDate")
                        .IsRequired()
                        .HasColumnName("fmtdate")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Prefix")
                        .HasColumnName("prefix")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.Property<int>("SerialLength")
                        .HasColumnName("seriallength")
                        .HasColumnType("int");

                    b.Property<string>("Suffix")
                        .HasColumnName("suffix")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.Property<bool>("TaskDate")
                        .HasColumnName("taskdate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_NumberOption_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_NumberOption_Modify_User_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_NumberOption_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_NumberOption_tenant_id");

                    b.ToTable("basis_numberoption");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.NumberRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("BeModule")
                        .HasColumnName("bemodule")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("Day")
                        .HasColumnName("day")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnName("month")
                        .HasColumnType("int");

                    b.Property<int>("PrevSerial")
                        .HasColumnName("prevserial")
                        .HasColumnType("int");

                    b.Property<int>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("int");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_NumberRecord_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_NumberRecord_tenant_id");

                    b.ToTable("basis_numberrecord");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnName("areaname")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasColumnName("encode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Super_Id")
                        .HasColumnName("super_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Super_Id")
                        .HasName("Index_Permission_Super_Id");

                    b.HasIndex("tenant_id")
                        .HasName("Index_Permission_tenant_id");

                    b.ToTable("basis_permission");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("ContentType")
                        .HasColumnName("contenttype")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<string>("MD5")
                        .HasColumnName("md5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<long>("Size")
                        .HasColumnName("size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnName("uploadtime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Uploader_Id")
                        .HasColumnName("uploader_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Uploader_Id")
                        .HasName("Index_Resource_Uploader_Id");

                    b.HasIndex("tenant_id")
                        .HasName("Index_Resource_tenant_id");

                    b.ToTable("basis_resource");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("EnCode")
                        .IsRequired()
                        .HasColumnName("encode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("IsAdmin")
                        .HasColumnName("isadmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("isdefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Remarks")
                        .HasColumnName("remarks")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_Role_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_Role_Modify_User_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_Role_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_Role_tenant_id");

                    b.ToTable("basis_role");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.RoleMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Role_Id")
                        .HasColumnName("role_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("User_Id")
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Role_Id")
                        .HasName("Index_RoleMember_Role_Id");

                    b.HasIndex("User_Id")
                        .HasName("Index_RoleMember_User_Id");

                    b.ToTable("basis_rolemember");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.RolePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Permission_Id")
                        .HasColumnName("permission_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Role_Id")
                        .HasColumnName("role_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Permission_Id")
                        .HasName("Index_RolePermission_Permission_Id");

                    b.HasIndex("Role_Id")
                        .HasName("Index_RolePermission_Role_Id");

                    b.ToTable("basis_rolepermission");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("fullname")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("HandIcon_Id")
                        .HasColumnName("handicon_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnName("shortname")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Super_Id")
                        .HasColumnName("super_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Tenant_Id")
                        .HasColumnName("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("UrlMark")
                        .HasColumnName("urlmark")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("HandIcon_Id")
                        .HasName("Index_Tenant_HandIcon_Id");

                    b.HasIndex("Super_Id")
                        .HasName("Index_Tenant_Super_Id");

                    b.HasIndex("Tenant_Id")
                        .HasName("Index_Tenant_Tenant_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_Tenant_isdeleted");

                    b.ToTable("basis_tenant");

                    b.HasData(
                        new
                        {
                            Id = "00fm5yfgzpgp93ylkuxshsc73",
                            FullName = "默认组织",
                            ShortName = "default",
                            UrlMark = "*",
                            isdeleted = false
                        });
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.TenantHost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnName("host")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("Tenant_Id")
                        .IsRequired()
                        .HasColumnName("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Tenant_Id")
                        .HasName("Index_TenantHost_Tenant_Id");

                    b.ToTable("basis_tenanthost");
                });

            modelBuilder.Entity("FastFrame.Entity.Basis.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("account")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Enable")
                        .IsRequired()
                        .HasColumnName("enable")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("EncryptionKey")
                        .IsRequired()
                        .HasColumnName("encryptionkey")
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4")
                        .HasMaxLength(36)
                        .IsUnicode(true);

                    b.Property<string>("HandIcon_Id")
                        .HasColumnName("handicon_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("IsAdmin")
                        .HasColumnName("isadmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phonenumber")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_User_Create_User_Id");

                    b.HasIndex("HandIcon_Id")
                        .HasName("Index_User_HandIcon_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_User_Modify_User_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_User_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_User_tenant_id");

                    b.ToTable("basis_user");

                    b.HasData(
                        new
                        {
                            Id = "00fm5yfgq3q893ylku6uzb57i",
                            Account = "admin",
                            CreateTime = new DateTime(2019, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Create_User_Id = "00fm5yfgq3q893ylku6uzb57i",
                            Email = "gongjie@qq.com",
                            Enable = "enabled",
                            EncryptionKey = "7d9d7edd6727912ce10b976818dd2856",
                            IsAdmin = true,
                            ModifyTime = new DateTime(2019, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modify_User_Id = "00fm5yfgq3q893ylku6uzb57i",
                            Name = "管理员",
                            Password = "9557847e0632e2f167a143b7ab3d668a",
                            PhoneNumber = "18675517757",
                            isdeleted = false
                        });
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.Email", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FromUser_Id")
                        .HasColumnName("fromuser_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Replay_Email_Id")
                        .HasColumnName("replay_email_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("FromUser_Id")
                        .HasName("Index_Email_FromUser_Id");

                    b.HasIndex("Replay_Email_Id")
                        .HasName("Index_Email_Replay_Email_Id");

                    b.HasIndex("tenant_id")
                        .HasName("Index_Email_tenant_id");

                    b.ToTable("chat_email");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.EmailAnnex", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Email_Id")
                        .HasColumnName("email_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Resource_Id")
                        .HasColumnName("resource_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Email_Id")
                        .HasName("Index_EmailAnnex_Email_Id");

                    b.HasIndex("Resource_Id")
                        .HasName("Index_EmailAnnex_Resource_Id");

                    b.ToTable("chat_emailannex");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.EmailContent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(true);

                    b.Property<string>("Email_Id")
                        .HasColumnName("email_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Email_Id")
                        .HasName("Index_EmailContent_Email_Id");

                    b.ToTable("chat_emailcontent");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.EmailTarget", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Email_Id")
                        .HasColumnName("email_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("HaveRead")
                        .HasColumnName("haveread")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("To_Id")
                        .HasColumnName("to_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Email_Id")
                        .HasName("Index_EmailTarget_Email_Id");

                    b.HasIndex("To_Id")
                        .HasName("Index_EmailTarget_To_Id");

                    b.ToTable("chat_emailtarget");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.FriendMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("From_Id")
                        .HasColumnName("from_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("MessageTime")
                        .HasColumnName("messagetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Resource_Id")
                        .HasColumnName("resource_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("From_Id")
                        .HasName("Index_FriendMessage_From_Id");

                    b.HasIndex("Resource_Id")
                        .HasName("Index_FriendMessage_Resource_Id");

                    b.HasIndex("tenant_id")
                        .HasName("Index_FriendMessage_tenant_id");

                    b.ToTable("chat_friendmessage");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("HandIcon_Id")
                        .HasColumnName("handicon_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("LordUser_Id")
                        .HasColumnName("lorduser_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Summary")
                        .HasColumnName("summary")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_Group_Create_User_Id");

                    b.HasIndex("HandIcon_Id")
                        .HasName("Index_Group_HandIcon_Id");

                    b.HasIndex("LordUser_Id")
                        .HasName("Index_Group_LordUser_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_Group_Modify_User_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_Group_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_Group_tenant_id");

                    b.ToTable("chat_group");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.GroupManager", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Group_Id")
                        .HasColumnName("group_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("User_Id")
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Group_Id")
                        .HasName("Index_GroupManager_Group_Id");

                    b.HasIndex("User_Id")
                        .HasName("Index_GroupManager_User_Id");

                    b.ToTable("chat_groupmanager");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.GroupMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("From_Id")
                        .HasColumnName("from_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Group_Id")
                        .HasColumnName("group_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime>("MessageTime")
                        .HasColumnName("messagetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Resource_Id")
                        .HasColumnName("resource_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("From_Id")
                        .HasName("Index_GroupMessage_From_Id");

                    b.HasIndex("Group_Id")
                        .HasName("Index_GroupMessage_Group_Id");

                    b.HasIndex("Resource_Id")
                        .HasName("Index_GroupMessage_Resource_Id");

                    b.HasIndex("tenant_id")
                        .HasName("Index_GroupMessage_tenant_id");

                    b.ToTable("chat_groupmessage");
                });

            modelBuilder.Entity("FastFrame.Entity.Chat.MessageTarget", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("HaveRead")
                        .HasColumnName("haveread")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message_Id")
                        .HasColumnName("message_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("To_Id")
                        .HasColumnName("to_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Message_Id")
                        .HasName("Index_MessageTarget_Message_Id");

                    b.HasIndex("To_Id")
                        .HasName("Index_MessageTarget_To_Id");

                    b.ToTable("chat_messagetarget");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowInstance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("BeModuleName")
                        .IsRequired()
                        .HasColumnName("bemodulename")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("BeModuleText")
                        .HasColumnName("bemoduletext")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("BillNumber")
                        .HasColumnName("billnumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Bill_Id")
                        .IsRequired()
                        .HasColumnName("bill_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime?>("CompleteTime")
                        .HasColumnName("completetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrStep_Id")
                        .HasColumnName("currstep_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Enabled")
                        .IsRequired()
                        .HasColumnName("enabled")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("IsComlete")
                        .HasColumnName("iscomlete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastCheckTime")
                        .HasColumnName("lastchecktime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastChecker_Id")
                        .HasColumnName("lastchecker_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Sponsor_Id")
                        .HasColumnName("sponsor_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<DateTime?>("StartTime")
                        .HasColumnName("starttime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("int");

                    b.Property<string>("WorkFlow_Id")
                        .IsRequired()
                        .HasColumnName("workflow_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Bill_Id")
                        .HasName("Index_FlowInstance_Bill_Id");

                    b.HasIndex("CurrStep_Id")
                        .HasName("Index_FlowInstance_CurrStep_Id");

                    b.HasIndex("LastChecker_Id")
                        .HasName("Index_FlowInstance_LastChecker_Id");

                    b.HasIndex("Sponsor_Id")
                        .HasName("Index_FlowInstance_Sponsor_Id");

                    b.HasIndex("WorkFlow_Id")
                        .HasName("Index_FlowInstance_WorkFlow_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_FlowInstance_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_FlowInstance_tenant_id");

                    b.ToTable("flow_flowinstance");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowInstanceDept", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("BeDept_Id")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FlowInstance_Id")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("FlowInstanceDept");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowLine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<int>("From")
                        .HasColumnName("from")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<int>("To")
                        .HasColumnName("to")
                        .HasColumnType("int");

                    b.Property<decimal>("Weights")
                        .HasColumnName("weights")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WorkFlow_Id")
                        .HasColumnName("workflow_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("WorkFlow_Id")
                        .HasName("Index_FlowLine_WorkFlow_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_FlowLine_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_FlowLine_tenant_id");

                    b.ToTable("flow_flowline");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowLineCond", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Compare")
                        .IsRequired()
                        .HasColumnName("compare")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnName("fieldname")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("FieldText")
                        .IsRequired()
                        .HasColumnName("fieldtext")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnName("fieldvalue")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("FieldValueText")
                        .HasColumnName("fieldvaluetext")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("FlowLink_Id")
                        .HasColumnName("flowlink_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("FlowLink_Id")
                        .HasName("Index_FlowLineCond_FlowLink_Id");

                    b.ToTable("flow_flowlinecond");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowNode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("DeptCheck")
                        .HasColumnName("deptcheck")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Key")
                        .HasColumnName("key")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<bool>("TriggerAppNotify")
                        .HasColumnName("triggerappnotify")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TriggerSmsNotify")
                        .HasColumnName("triggersmsnotify")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TriggerWxNotify")
                        .HasColumnName("triggerwxnotify")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("WorkFlow_Id")
                        .HasColumnName("workflow_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("WorkFlow_Id")
                        .HasName("Index_FlowNode_WorkFlow_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_FlowNode_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_FlowNode_tenant_id");

                    b.ToTable("flow_flownode");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowNodeField", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnName("fieldname")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("FlowNode_Id")
                        .HasColumnName("flownode_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("FlowNode_Id")
                        .HasName("Index_FlowNodeField_FlowNode_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_FlowNodeField_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_FlowNodeField_tenant_id");

                    b.ToTable("flow_flownodefield");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowNodeRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FlowNode_Id")
                        .HasColumnName("flownode_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Role_Id")
                        .HasColumnName("role_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("FlowNode_Id")
                        .HasName("Index_FlowNodeRole_FlowNode_Id");

                    b.HasIndex("Role_Id")
                        .HasName("Index_FlowNodeRole_Role_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_FlowNodeRole_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_FlowNodeRole_tenant_id");

                    b.ToTable("flow_flownoderole");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowNodeUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FlowNode_Id")
                        .HasColumnName("flownode_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("User_Id")
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("FlowNode_Id")
                        .HasName("Index_FlowNodeUser_FlowNode_Id");

                    b.HasIndex("User_Id")
                        .HasName("Index_FlowNodeUser_User_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_FlowNodeUser_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_FlowNodeUser_tenant_id");

                    b.ToTable("flow_flownodeuser");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowProcess", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Action")
                        .HasColumnName("action")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Desc")
                        .HasColumnName("desc")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("FlowInstance_Id")
                        .HasColumnName("flowinstance_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FlowStepName")
                        .HasColumnName("flowstepname")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FlowStep_Id")
                        .HasColumnName("flowstep_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<int>("NodeKey")
                        .HasColumnName("nodekey")
                        .HasColumnType("int");

                    b.Property<DateTime>("OperateTime")
                        .HasColumnName("operatetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OperaterName")
                        .HasColumnName("operatername")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Operater_Id")
                        .HasColumnName("operater_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("FlowInstance_Id")
                        .HasName("Index_FlowProcess_FlowInstance_Id");

                    b.HasIndex("FlowStep_Id")
                        .HasName("Index_FlowProcess_FlowStep_Id");

                    b.HasIndex("Operater_Id")
                        .HasName("Index_FlowProcess_Operater_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_FlowProcess_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_FlowProcess_tenant_id");

                    b.ToTable("flow_flowprocess");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowSnapshot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FKey_Id")
                        .HasColumnName("fkey_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FlowInstance_Id")
                        .HasColumnName("flowinstance_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("SnapshotContent")
                        .HasColumnName("snapshotcontent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("FKey_Id")
                        .HasName("Index_FlowSnapshot_FKey_Id");

                    b.HasIndex("FlowInstance_Id")
                        .HasName("Index_FlowSnapshot_FlowInstance_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_FlowSnapshot_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_FlowSnapshot_tenant_id");

                    b.ToTable("flow_flowsnapshot");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowStep", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FlowInstance_Id")
                        .HasColumnName("flowinstance_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<int>("FlowNodeKey")
                        .HasColumnName("flownodekey")
                        .HasColumnType("int");

                    b.Property<string>("FlowNode_Id")
                        .HasColumnName("flownode_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<int>("NextStepKey")
                        .HasColumnName("nextstepkey")
                        .HasColumnType("int");

                    b.Property<string>("NextStep_Id")
                        .HasColumnName("nextstep_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<int>("PrevStepKey")
                        .HasColumnName("prevstepkey")
                        .HasColumnType("int");

                    b.Property<string>("PrevStep_Id")
                        .HasColumnName("prevstep_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("StepName")
                        .HasColumnName("stepname")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("StepOrder")
                        .HasColumnName("steporder")
                        .HasColumnType("int");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("FlowInstance_Id")
                        .HasName("Index_FlowStep_FlowInstance_Id");

                    b.HasIndex("FlowNode_Id")
                        .HasName("Index_FlowStep_FlowNode_Id");

                    b.HasIndex("NextStep_Id")
                        .HasName("Index_FlowStep_NextStep_Id");

                    b.HasIndex("PrevStep_Id")
                        .HasName("Index_FlowStep_PrevStep_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_FlowStep_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_FlowStep_tenant_id");

                    b.ToTable("flow_flowstep");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.FlowStepUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("BeDept_Id")
                        .HasColumnName("bedept_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("BeRole_Id")
                        .HasColumnName("berole_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FlowInstance_Id")
                        .HasColumnName("flowinstance_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("FlowStep_Id")
                        .HasColumnName("flowstep_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("User_Id")
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("BeDept_Id")
                        .HasName("Index_FlowStepUser_BeDept_Id");

                    b.HasIndex("BeRole_Id")
                        .HasName("Index_FlowStepUser_BeRole_Id");

                    b.HasIndex("FlowInstance_Id")
                        .HasName("Index_FlowStepUser_FlowInstance_Id");

                    b.HasIndex("FlowStep_Id")
                        .HasName("Index_FlowStepUser_FlowStep_Id");

                    b.HasIndex("User_Id")
                        .HasName("Index_FlowStepUser_User_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_FlowStepUser_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_FlowStepUser_tenant_id");

                    b.ToTable("flow_flowstepuser");
                });

            modelBuilder.Entity("FastFrame.Entity.Flow.WorkFlow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("BeModule")
                        .HasColumnName("bemodule")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("BeModuleName")
                        .HasColumnName("bemodulename")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("createtime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Create_User_Id")
                        .HasColumnName("create_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Enabled")
                        .IsRequired()
                        .HasColumnName("enabled")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnName("modifytime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Modify_User_Id")
                        .HasColumnName("modify_user_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Remarks")
                        .HasColumnName("remarks")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("int");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("tenant_id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Create_User_Id")
                        .HasName("Index_WorkFlow_Create_User_Id");

                    b.HasIndex("Modify_User_Id")
                        .HasName("Index_WorkFlow_Modify_User_Id");

                    b.HasIndex("isdeleted")
                        .HasName("Index_WorkFlow_isdeleted");

                    b.HasIndex("tenant_id")
                        .HasName("Index_WorkFlow_tenant_id");

                    b.ToTable("flow_workflow");
                });
#pragma warning restore 612, 618
        }
    }
}
