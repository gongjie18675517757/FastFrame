<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FastFrame.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:FastFrame.Infrastructure.Client.Client2ServiceMessage">
            <summary>
            服务端消息
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.Client2ServiceMessage.MsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.Client2ServiceMessage.MsgContent">
            <summary>
            消息体
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Client.ClientChoose">
            <summary>
            客户端选择
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientChoose.Id">
            <summary>
            确认会话ID
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientChoose.Multiple">
            <summary>
            是否多选
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientChoose.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientChoose.Text">
            <summary>
            提示文本
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientChoose.Values">
            <summary>
            可选值列表
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientChoose.Timeout">
            <summary>
            超时(秒)
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Client.ClientChooseResult">
            <summary>
            客户端选择结果
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientChooseResult.Id">
            <summary>
            确认会话ID
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientChooseResult.Result">
            <summary>
            选择结果
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Client.ClientConfirm">
            <summary>
            客户端确认
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientConfirm.Id">
            <summary>
            确认会话ID
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientConfirm.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientConfirm.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientConfirm.Timeout">
            <summary>
            超时(秒)
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Client.ClientConfirmResult">
            <summary>
            客户端确认结果
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientConfirmResult.Id">
            <summary>
            确认会话ID
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientConfirmResult.Result">
            <summary>
            确认结果
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Client.ClientMamager">
            <summary>
            客户端连接管理
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Client.ClientMamager.PublishChooseAsync(FastFrame.Infrastructure.Client.ClientChoose,System.String)">
            <summary>
            发布客户端选择
            </summary>
            <param name="input"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Client.ClientMamager.PublishConfirmAsync(FastFrame.Infrastructure.Client.ClientConfirm,System.String)">
            <summary>
            发布客户端确定
            </summary>
            <param name="input"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Client.ClientMamager.PublishNotifyAsync(FastFrame.Infrastructure.Client.ClientNotify,System.String[])">
            <summary>
            发布客户端通知
            </summary>
            <param name="notify"></param>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Client.ClientMamager.PublishSendAsync(System.String,System.String,System.String[])">
            <summary>
            发布消息给客户端
            </summary>
            <param name="msgType"></param>
            <param name="msgContent"></param>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Client.ClientMamager.HandleSubscribeServerMessage(System.String,FastFrame.Infrastructure.Client.Client2ServiceMessage)">
            <summary>
            订阅通知(客户端发送给服务端的消息)
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.Client.ClientMamager.HandleSubscribeClientMessage(System.String,FastFrame.Infrastructure.Client.Service2ClientMessage)">
            <summary>
            订阅通知(服务端发送给客户端的消息)
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.Client.ClientMamager.ExistsIsOnLine(System.String)">
            <summary>
            检查是否在线
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Client.ClientNotify">
            <summary>
            客户端通知
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientNotify.Id">
            <summary>
            通知ID
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientNotify.Title">
            <summary>
            通知标题
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientNotify.Content">
            <summary>
            通知内容
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientNotify.ModuleName">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.ClientNotify.ToUrl">
            <summary>
            跳转地址
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Client.IClientConnection">
            <summary>
            抽象客户端连接
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Client.IClientConnection.SendAsync(System.String[],System.String,System.Object[])">
            <summary>
            发送消息(直接发送)
            </summary>
            <param name="userIds"></param>
            <param name="msg_type"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Client.IClientConnection.ExistsIsOnLine(System.String)">
            <summary>
            检查是否在线
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.IClientConnection.Name">
            <summary>
            连接名称
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Client.IClientManage">
            <summary>
            客户端管理
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Client.IClientManage.PublishSendAsync(System.String,System.String,System.String[])">
            <summary>
            给指定用户发送消息(发布到消息队列)
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.Client.IClientManage.PublishNotifyAsync(FastFrame.Infrastructure.Client.ClientNotify,System.String[])">
            <summary>
            通知用户(发布到消息队列)
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.Client.IClientManage.PublishConfirmAsync(FastFrame.Infrastructure.Client.ClientConfirm,System.String)">
            <summary>
            提示用户确认(发布到消息队列)
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.Client.IClientManage.PublishChooseAsync(FastFrame.Infrastructure.Client.ClientChoose,System.String)">
            <summary>
            提示用户选择(发布到消息队列)
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.Client.IClientManage.ExistsIsOnLine(System.String)">
            <summary>
            检查是否在线
            </summary>
            <param name="userId"></param>
            <returns>在线的连接名</returns>
        </member>
        <member name="F:FastFrame.Infrastructure.Client.IClientManage.ClientNotify">
            <summary>
            通知客户端
            </summary>
        </member>
        <member name="F:FastFrame.Infrastructure.Client.IClientManage.ClientConfirm">
            <summary>
            要求客户端确认
            </summary>
        </member>
        <member name="F:FastFrame.Infrastructure.Client.IClientManage.ClientChoose">
            <summary>
            要求客户端选择
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Client.Service2ClientMessage">
            <summary>
            客户端消息
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Client.Service2ClientMessage.ToUser">
            <summary>
            要通知的人
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.ComparisonCollection`2">
            <summary>
            比较集合,返回差异
            </summary>
            <typeparam name="TBefore"></typeparam>
            <typeparam name="TAfter"></typeparam>
        </member>
        <member name="M:FastFrame.Infrastructure.ComparisonCollection`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Func{`0,`1,System.Boolean})">
            <summary>
            
            </summary>
            <param name="befores">修改前</param>
            <param name="afters">修改后</param>
            <param name="compare">比较表达式</param>
        </member>
        <member name="M:FastFrame.Infrastructure.ComparisonCollection`2.GetCollectionByAdded">
            <summary>
            返回标识为新增的内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.ComparisonCollection`2.GetCollectionByDeleted">
            <summary>
            返回标识为删除的内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.ComparisonCollection`2.GetCollectionByModify">
            <summary>
            返回标识为修改的内容 
            </summary>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.ConstValuePool">
            <summary>
            常量池
            </summary>
        </member>
        <member name="F:FastFrame.Infrastructure.ConstValuePool.CacheUserMapKey">
            <summary>
            缓存用户连接信息
            </summary>
        </member>
        <member name="F:FastFrame.Infrastructure.ConstValuePool.Token_Name">
            <summary>
            存用户身份的cookie键
            </summary>
        </member>
        <member name="F:FastFrame.Infrastructure.ConstValuePool.CacheTenant">
            <summary>
            缓存租户信息键
            </summary>
        </member>
        <member name="F:FastFrame.Infrastructure.ConstValuePool.CacheTenantHost">
            <summary>
            缓存租户HOST信息键
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.DescriptionHelp.GetDescription(System.Type,System.String)">
            <summary>
            返回类型的注释说明
            </summary>　
        </member>
        <member name="M:FastFrame.Infrastructure.DescriptionHelp.GetPropSummary(System.Type,System.Reflection.PropertyInfo,System.String)">
            <summary>
            获取属性的说明 
            </summary>　　
        </member>
        <member name="M:FastFrame.Infrastructure.DescriptionHelp.GetEnumSummary(System.Type,System.String,System.String)">
            <summary>
            获取枚举的说明
            </summary>
            <param name="enumType"></param>
            <param name="enumValue"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.EventBus.BaseEventData`1">
            <summary>
            实体变化事件数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:FastFrame.Infrastructure.EventBus.IEventBus">
            <summary>
            进程内事件总线(同步)
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.EventBus.IEventBus.TriggerEventAsync``1(``0)">
            <summary>
            触发事件
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.EventBus.IEventBus.RequestAsync``2(``1)">
            <summary>
            触发请求
            </summary> 
        </member>
        <member name="T:FastFrame.Infrastructure.EventBus.IEventData`1">
            <summary>
            事件数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:FastFrame.Infrastructure.EventBus.IEventHandle`1">
            <summary>
            事件处理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FastFrame.Infrastructure.EventBus.IEventHandle`1.HandleEventAsync(`0)">
            <summary>
            处理方法
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.EventBus.IRequestHandle`2">
            <summary>
            事件处理
            </summary> 
        </member>
        <member name="P:FastFrame.Infrastructure.MsgException.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.NotFoundException">
            <summary>
            未匹配到内容
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.UniqueException">
            <summary>
            数据重复异常
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.UniqueException.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.UniqueException.PropNames">
            <summary>
            重复的字段名称
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.ExpressionExtended">
            <summary>
            表达式扩展
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.ExpressionExtended`1">
            <summary>
            表达式扩展
            </summary> 
        </member>
        <member name="T:FastFrame.Infrastructure.ExpressionExtended`2">
            <summary>
            表达式扩展
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目录类型</typeparam>
        </member>
        <member name="M:FastFrame.Infrastructure.ExpressionExtended`2.GetMapSetExpression">
            <summary>
            生成表达式树[将source对象的属性,写到target对象的对应属性上]
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.ExpressionExtended`2.GetMapSetDelegate">
            <summary>
            生成委托[将source对象的属性,写到target对象的对应属性上]
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.ExpressionExtended`2.MapSet(`0,`1)">
            <summary>
            将source对象的属性,写到target对象的对应属性上
            </summary>
            <param name="source">源对象</param>
            <param name="target">目录对象</param>
        </member>
        <member name="M:FastFrame.Infrastructure.ExpressionExtended`2.GetMapToExpression">
            <summary>
            生成表达式树[生成target类型的target对象,并将source对象的属性填充到target对象上]
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.ExpressionExtended`2.GetMapToDelegate">
            <summary>
            生成委托:[ 生成target类型的target对象,并将source对象的属性填充到target对象上]
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.ExpressionExtended`2.MapTo(`0)">
            <summary>
             生成target类型的target对象,并将source对象的属性填充到target对象上
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.EachLoopChild``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},``0,System.Action{System.ValueTuple{``0,``0}})">
            <summary>
            递归子节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="childSelector"></param>
            <param name="super"></param>
            <param name="eachAction"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.SelectLoopChild``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            展开子节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="childSelector"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.SelectLoopChild``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Action{``0,System.Collections.Generic.IEnumerable{``0}},``1)">
            <summary>
            组合树
            </summary>
            <typeparam name="T">树类型</typeparam>
            <typeparam name="TKey">树键类型</typeparam>
            <param name="enumerable">未组合的一维节点</param>
            <param name="patentFunc">取上级键</param>
            <param name="keyFunc">取当前健</param>
            <param name="setChildAction">设置下级</param>
            <param name="parent_id">指定当前父节点</param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.TryGetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            获取字典值，如果没有，就返回默认值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
            <param name="dic"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.TryGetValueOrCreate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            获取字典值，如果没有，就根据指定委托创建一个
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.IsNullOrWhiteSpace(System.String)">
            <summary>
            判空
            </summary>
            <param name="in"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.ToSplitArray(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="in"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.ToJoinString(System.Collections.Generic.IEnumerator{System.String},System.String)">
            <summary>
            连接字符串
            </summary>
            <param name="in"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.ToBase64(System.String)">
            <summary>
            ToBase64
            </summary>
            <param name="in"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.FromBase64(System.String)">
            <summary>
            FromBase64
            </summary>
            <param name="in"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.ToMD5(System.String)">
            <summary>
            ToMD5
            </summary>
            <param name="in"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.GetValue(System.Object,System.String)">
            <summary>
            获取对象值
            </summary>
            <param name="in"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.MapTo``2(System.Linq.IQueryable{``0})">
            <summary>
            属性映射
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="sources"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.MapTo``2(``0)">
            <summary>
            属性映射
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="sources"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.MapSet``2(``0,``1)">
            <summary>
            属性映射
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.ToJson(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="in"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.ToJObject(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="in"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Extension.ToObject``1(System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="in"></param>
            <param name="haveHexDencode"></param>
            <param name="converters"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Identity.ICurrUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Identity.ICurrUser.ToKen">
            <summary>
            当前ToKen的ID
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Identity.ICurrUser.Id">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Identity.ICurrUser.Name">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Identity.ICurrUser.Account">
            <summary>
            帐号名
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Identity.ICurrUser.IsAdmin">
            <summary>
            是否管理员
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Identity.DataPermission">
            <summary>
            数据权限
            </summary>
        </member>
        <member name="F:FastFrame.Infrastructure.Identity.DataPermission.A">
            <summary>
            本人录入
            </summary>
        </member>
        <member name="F:FastFrame.Infrastructure.Identity.DataPermission.B">
            <summary>
            本部门录入
            </summary>
        </member>
        <member name="F:FastFrame.Infrastructure.Identity.DataPermission.C">
            <summary>
            全部
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Identity.IIdentity">
            <summary>
            身份接口
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Identity.IIdentity.IsEnabled">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Identity.IIdentity.ExpiredTime">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Identity.IIdentity.LastTime">
            <summary>
            最后活动时间
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Identity.IIdentity.LoginTime">
            <summary>
            登陆时间
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Identity.IIdentity.User_Id">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Identity.IIdentity.GetToken">
            <summary>
            获取TOKEN
            </summary>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Identity.IIdentityManager">
            <summary>
            身份管理
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Identity.IIdentityManager.ExistsTokenAsync(System.String,System.Net.IPAddress)">
            <summary>
            验证TOKEN是否有效
            </summary>
            <param name="token"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Identity.IIdentityManager.GenerateIdentity(System.String,System.Net.IPAddress)">
            <summary>
            生成身份
            </summary>
            <param name="userId"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Identity.IIdentityManager.RefreshTokenAsync(System.String)">
            <summary>
            刷新TOKEN
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Identity.IIdentityManager.SetTokenFailureAsync(System.String)">
            <summary>
            强制TOKEN失效
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Identity.IIdentityManager.SetUserAllTokenFailureAsync(System.String)">
            <summary>
            强制用户所有TOKEN失效
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.IFilter">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.IFilter.MakePredicate``1">
            <summary>
            生成条件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.FilterMode">
            <summary>
            多条件组的查询模式
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.ImageExtended">
            <summary>
            图片处理扩展
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.ImageExtended.GetPicThumbnail(System.IO.Stream,System.Func{System.DrawingCore.Image,System.ValueTuple{System.Int32,System.Int32}},System.Int32)">
            <summary>
            压缩图片
            </summary>
            <param name="sFile"></param>
            <param name="getWidthHeightFunc"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.ImageExtended.GetPicThumbnail(System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            无损压缩图片  
            <param name="sFile">原图片</param>   
            <param name="dHeight">高度</param>  
            <param name="dWidth"></param>  
            <param name="flag">压缩质量(数字越小压缩率越高) 1-100</param>  
            <returns></returns>  
        </member>
        <member name="T:FastFrame.Infrastructure.Interface.IApplicationInitialLifetime">
            <summary>
            应用程序初始化时
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IApplicationInitialLifetime.InitialAsync">
            <summary>
            执行初始化(只会执行一次)
            注意：要自己处理异常
            </summary>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Interface.IApplicationSession">
            <summary>
            当前会话信息
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Interface.IApplicationSession.CurrUser">
            <summary>
            获取当前用户
            </summary>
            <returns></returns>
        </member>
        <member name="P:FastFrame.Infrastructure.Interface.IApplicationSession.Tenant_Id">
            <summary>
            当前租户(为Null则表示为根租户)
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IApplicationSession.LoginAsync(FastFrame.Infrastructure.Identity.ICurrUser)">
            <summary>
            登陆
            </summary>
            <param name="currUser"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IApplicationSession.LogOutAsync">
            <summary>
            登出
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IApplicationSession.RefreshIdentityAsync">
            <summary>
            刷新身份
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IApplicationSession.InitAsync">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IApplicationSession.GetIPAddress">
            <summary>
            获取当前连接的IP
            </summary>
            <returns></returns>
        </member>
        <member name="P:FastFrame.Infrastructure.Interface.IApplicationSession.ApplicationRootPath">
            <summary>
            运行目录
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Interface.IApplicationUnInitialLifetime">
            <summary>
            应用程序关闭时
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IApplicationUnInitialLifetime.UnInitialAsync">
            <summary>
            执行关闭操作(只会执行一次)
            注意：要自己处理异常
            </summary>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Interface.IBackgroundJob">
            <summary>
            后台执行任务
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.SetInterval``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.String)">
            <summary>
            定时执行 
            <para>* * * * * *</para>
            <para>- - - - - -</para>
            <para>| | | | | |</para>
            <para>| | | | | +--- day of week (0 - 6) (Sunday=0)</para>
            <para>| | | | +----- month (1 - 12)</para>
            <para>| | | +------- day of month (1 - 31)</para>
            <para>| | +--------- hour (0 - 23)</para>
            <para>| +----------- min (0 - 59)</para>
            <para>+------------- sec (0 - 59)</para>
            </summary> 
            <typeparam name="TService"></typeparam>
            <param name="methodCall"></param>
            <param name="cronExperssion"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.SetIntervalByMethod``1(System.Reflection.MethodInfo,System.String)">
            <summary>
            定时执行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method"></param>
            <param name="cron"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.SetTimeout``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Nullable{System.TimeSpan})">
            <summary>
            延时执行一次
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="methodCall"></param>
            <param name="timeSpan"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.SetTimeoutByMethod``1(System.Reflection.MethodInfo,System.Object[],System.Nullable{System.TimeSpan})">
            <summary>
            延时执行一次
            </summary>
            <typeparam name="TService"></typeparam> 
            <param name="method"></param>
            <param name="parms"></param>
            <param name="timeSpan"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Minutely">
            <summary>
            每分钟
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Minutely(System.Int32)">
            <summary>
            每分钟
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Hourly">
            <summary>
            每小时
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Hourly(System.Int32)">
            <summary>
            每小时
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Daily">
            <summary>
            每天
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Daily(System.Int32)">
            <summary>
            每天
            </summary>
            <param name="hour"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Daily(System.Int32,System.Int32)">
            <summary>
            每天
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Weekly">
            <summary>
            每周
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Weekly(System.DayOfWeek)">
            <summary>
            每周
            </summary>
            <param name="dayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Weekly(System.DayOfWeek,System.Int32)">
            <summary>
            每周
            </summary>
            <param name="dayOfWeek"></param>
            <param name="hour"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Weekly(System.DayOfWeek,System.Int32,System.Int32)">
            <summary>
            每周
            </summary>
            <param name="dayOfWeek"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Monthly">
            <summary>
            每月
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Monthly(System.Int32)">
            <summary>
            每月
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Monthly(System.Int32,System.Int32)">
            <summary>
            每月
            </summary>
            <param name="day"></param>
            <param name="hour"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Monthly(System.Int32,System.Int32,System.Int32)">
            <summary>
            每月
            </summary>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Yearly">
            <summary>
            每年
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Yearly(System.Int32)">
            <summary>
            每年
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Yearly(System.Int32,System.Int32)">
            <summary>
            每年
            </summary>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Yearly(System.Int32,System.Int32,System.Int32)">
            <summary>
            每年
            </summary>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Yearly(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            每年
            </summary>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IBackgroundJob.Never">
            <summary>
            从不执行
            </summary>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Interface.ICacheProvider">
            <summary>
            缓存
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Interface.IExcelExportProvider">
            <summary>
            EXCEL导出
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IExcelExportProvider.GenerateExcelColumns``1">
            <summary>
            生成要导出的列
            </summary>
            <typeparam name="TDto"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Interface.IExcelExportProvider.GenerateExcelSteam``1(System.Func{FastFrame.Infrastructure.IPagination,System.Threading.Tasks.Task{FastFrame.Infrastructure.IPageList{``0}}},System.Collections.Generic.IEnumerable{FastFrame.Infrastructure.Interface.ExcelColumn{``0}},FastFrame.Infrastructure.IPagination)">
            <summary>
            生成EXCEL流
            </summary>
            <typeparam name="TDto"></typeparam>
            <param name="pageListFunc"></param>
            <param name="columns"></param>
            <param name="pagination"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Interface.ExcelColumn`1">
            <summary>
            EXCEL列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:FastFrame.Infrastructure.Interface.ExcelColumn`1.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Interface.ExcelColumn`1.ValueFunc">
            <summary>
            获取值方法
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.IntervalWork.IIntervalWorkHost">
            <summary>
            标记此类有需要执行定时任务
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.IntervalWork.IntervalWorkAttribute">
            <summary>
            后台定时任务
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.IntervalWork.IntervalWorkAttribute.CronExperssion">
            <summary>
            Cron表达式
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.IntervalWork.IntervalWorkServiceCollectionExtensions.IntervalMethodList">
            <summary>
            定时任务列表
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.IntervalWork.IntervalWorkServiceCollectionExtensions.AddIntervalWork(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            添加定时任务
            </summary>
            <param name="services"></param>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.IntervalWork.IntervalWorkServiceCollectionExtensions.AddAssembly(System.Reflection.Assembly)">
            <summary>
            添加程序集
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="T:FastFrame.Infrastructure.IPagination">
            <summary>
            查询列表参数
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.IPagination.Filters">
            <summary>
            条件
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.IPagination.KeyWord">
            <summary>
            模糊条件
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.IPagination.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.IPagination.PageSize">
            <summary>
            每页数量
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.IPagination.SortMode">
            <summary>
            排序方式
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.IPagination.SortName">
            <summary>
            排序列名称
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.IPagination.TryReplaceFilter``1(System.Func{``0,System.Boolean},System.Func{``0,FastFrame.Infrastructure.IFilter})">
            <summary>
            尝试替换条件
            如果返回为null,则删除
            </summary>
            <param name="func"></param>
            <param name="replaceFunc"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Lock.ILockFacatory.TryCreateLockAsync(System.String,System.TimeSpan)">
            <summary>
            尝试创建锁,如果资源被占用,则返回NULL
            </summary>
            <param name="key"></param>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Lock.ILockHolder.LockRelease">
            <summary>
            释放锁
            </summary>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.MessageQueue.IMessageQueue">
            <summary>
            消息队列
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.MessageQueue.IMessageQueue.PublishAsync(System.String,System.String)">
            <summary>
            发布消息
            </summary>
            <param name="qname">消息名</param>
            <param name="msg">消息体</param>
            <returns>消息ID</returns>
        </member>
        <member name="F:FastFrame.Infrastructure.MessageQueue.IMessageQueue.Service2ClientMessage">
            <summary>
            服务端发送给客户端
            </summary>
        </member>
        <member name="F:FastFrame.Infrastructure.MessageQueue.IMessageQueue.Client2ServiceMessage">
            <summary>
            客户端发送给服务端
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.MessageQueue.IMessageSubscribeHost">
            <summary>
            标记此类有需要消费消息
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.MessageQueue.MessageQueueServiceCollectionExtensions.SubscribeMethodList">
            <summary>
            订阅列表
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.MessageQueue.MessageQueueServiceCollectionExtensions.AddMessageQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            添加消息队列
            </summary>
            <param name="services"></param>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.MessageQueue.MessageQueueServiceCollectionExtensions.AddAssembly(System.Reflection.Assembly)">
            <summary>
            添加程序集
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="T:FastFrame.Infrastructure.MessageQueue.MessageSubscribeAttribute">
            <summary>
            认阅消息
            方法签名:(string msg_id,T msg),第一个参数为消息ID,订阅方自行判断重复消息的处理
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.MessageQueue.MessageSubscribeAttribute.Channel">
            <summary>
            消息管道
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Module.EnumInfo">
            <summary>
            数据字典信息
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.EnumInfo.Name">
            <summary>
            键名称
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.EnumInfo.SuperPropName">
            <summary>
            上级名称
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Module.IModuleDefinitionProvider">
            <summary>
            模块定义提供者
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.IModuleDefinitionProvider.DefinitionModuleAsync">
            <summary>
            定义模块
            </summary>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Module.IModuleDesProvider">
            <summary>
            类型/属性 说明提供
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.IModuleDesProvider.GetClassDescription(System.Type)">
            <summary>
            获取类说明
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.IModuleDesProvider.GetPropertyDescription(System.Reflection.PropertyInfo)">
            <summary>
            获取属性说明
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.IModuleDesProvider.GetPropertyDescription(System.Type,System.String)">
            <summary>
            获取属性说明
            </summary>
            <param name="type"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.IModuleDesProvider.GetEnumSummary(System.Type,System.String)">
            <summary>
            获取枚举说明
            </summary>
            <param name="enumType"></param>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Module.IModuleExportProvider">
            <summary>
            模块结构提供者
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.IModuleExportProvider.RegisterModule(FastFrame.Infrastructure.Module.ModuleStruct[])">
            <summary>
            注册模块
            </summary>
            <param name="moduleStructs"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.IModuleExportProvider.GetModuleStruts(System.String)">
            <summary>
            获取模块结构
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.IModuleExportProvider.HaveCheckModuleList">
            <summary>
            需要审核的模块
            </summary>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Module.ModuleFieldRule">
            <summary>
            模块字段验证规则
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Module.ModuleFieldStrut">
            <summary>
            模块字段结构
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.Type">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.Description">
            <summary>
            字段说明
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.Hide">
            <summary>
            隐藏标记
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.Readonly">
            <summary>
            只读标记
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.Rules">
            <summary>
            验证规则
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.Relate">
            <summary>
            关联自
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.EnumValues">
            <summary>
            枚举项
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.IsRequired">
            <summary>
            是否必填
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.Length">
            <summary>
            字段长度
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.GroupNames">
            <summary>
            表单分组
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleFieldStrut.EnumItemInfo">
            <summary>
            数据字典
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Module.ModuleStruct">
            <summary>
            模块结构
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleStruct.Name">
            <summary>
            名称
            </summary> 
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleStruct.Description">
            <summary>
            说明
            </summary> 
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleStruct.FieldInfoStruts">
            <summary>
            字段列表
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleStruct.RelateFields">
            <summary>
            被关联时显示的字段列表
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleStruct.IsTree">
            <summary>
            树结构
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleStruct.HasManage">
            <summary>
            有管理属性
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleStruct.Form">
            <summary>
            默认实体
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleStruct.HasFiles">
            <summary>
            有附件
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.ModuleStruct.HaveCheck">
            <summary>
            需要流程审核
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Module.TypeManger">
            <summary>
            类型管理
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Module.TypeManger.RegisterdTypes">
            <summary>
            所有已注册的类型
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.TypeManger.RegisterType``1">
            <summary>
            注册类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.TypeManger.RegisterType(System.Type)">
            <summary>
            注册类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.TypeManger.RegisterBaseType``1">
            <summary>
            注册根类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.TypeManger.RegisterBaseType(System.Type)">
            <summary>
            注册根类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.TypeManger.RegisterBaseType``1(System.Reflection.Assembly)">
            <summary>
            注册根类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assembly"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.TypeManger.RegisterBaseType(System.Type,System.Reflection.Assembly)">
            <summary>
            注册根类型
            </summary>
            <param name="type"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Module.TypeManger.TryGetType(System.String,System.Type@)">
            <summary>
            获取类型
            </summary>
            <param name="typeName"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.IPageList`1">
            <summary>
            分页返回内容
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:FastFrame.Infrastructure.IPageList`1.Total">
            <summary>
            返回查询到的总记录数量
            </summary> 
        </member>
        <member name="P:FastFrame.Infrastructure.IPageList`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Permission.IPermissionChecker">
            <summary>
            权限检查者
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Permission.IPermissionChecker.CheckIsGrantedAsync(System.String[])">
            <summary>
            检查是否被授权
            </summary> 
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Permission.IPermissionChecker.GetGrantedPermissions">
            <summary>
            所有被授权的权限
            </summary>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Permission.IPermissionDefinitionContext">
            <summary>
            权限定义上下文接口
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Permission.IPermissionDefinitionContext.TryRegisterPermission(System.String,System.String)">
            <summary>
            尝试注册权限
            如果注册过，则返回之前的
            </summary>
            <param name="permissionKey"></param>
            <param name="permissionText"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Permission.IPermissionDefinitionContext.PermissionDefinitions">
            <summary>
            所有已注册的权限
            </summary>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Permission.IPermissionDefinitionProvider">
            <summary>
            权限定义提供者
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Permission.PermissionAttribute">
            <summary>
            权限标记
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Permission.PermissionAttribute.#ctor(System.String)">
            <summary>
            应用权限
            </summary>
            <param name="permissionKey"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Permission.PermissionAttribute.#ctor(System.String,System.String)">
            <summary>
            定义权限
            </summary>
            <param name="permissionKey"></param>
            <param name="text"></param>
        </member>
        <member name="M:FastFrame.Infrastructure.Permission.PermissionAttribute.#ctor(System.String[])">
            <summary>
            应用权限
            </summary>
            <param name="permissionKeys"></param>
        </member>
        <member name="P:FastFrame.Infrastructure.Permission.PermissionAttribute.IsDefinition">
            <summary>
            是否权限定义
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Permission.PermissionAttribute.PermissionKey">
            <summary>
            权限标记
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Permission.PermissionAttribute.Text">
            <summary>
            权限文本
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Permission.PermissionDefinition">
            <summary>
            权限定义模型
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Permission.PermissionDefinition.Name">
            <summary>
            权限键
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Permission.PermissionDefinition.Text">
            <summary>
            权限文本
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Permission.PermissionDefinition.Child">
            <summary>
            子级权限
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Permission.PermissionDefinition.RegisterChildPermission(System.String,System.String)">
            <summary>
            注册子权限
            </summary>
            <param name="permissionKey"></param>
            <param name="permissionText"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Permission.PermissionDefinitionContext">
            <summary>
            权限定义上下文实现
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Permission.PermissionGroupAttribute">
            <summary>
            权限组标记
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Permission.PermissionGroupAttribute.Name">
            <summary>
            权限组名称
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Permission.PermissionGroupAttribute.Text">
            <summary>
            权限组文本
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Resource.IResourceInfo">
            <summary>
            资源信息
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Resource.IResourceInfo.Name">
            <summary>
            名称 
            </summary> 
        </member>
        <member name="P:FastFrame.Infrastructure.Resource.IResourceInfo.Size">
            <summary>
            大小 
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Resource.IResourceInfo.ContentType">
            <summary>
            类型 
            </summary> 
        </member>
        <member name="P:FastFrame.Infrastructure.Resource.IResourceInfo.UploaderName">
            <summary>
            上传人 
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Resource.IResourceInfo.UploadTime">
            <summary>
            上传时间 
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Resource.IResourceProvider">
            <summary>
            附件资源操作提供者
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Resource.IResourceProvider.WriteAsync(System.IO.Stream)">
            <summary>
            保存
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.Resource.IResourceProvider.ReadAsync(System.String)">
            <summary>
            读取
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.Resource.IResourceProvider.ExistsAsync(System.String)">
            <summary>
            检查是否存在
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.Resource.IResourceProvider.GetFilePath(System.String)">
            <summary>
            获取实际文件路径
            </summary>
            <param name="relativelyPath"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Resource.IResourceStoreProvider">
            <summary>
            资源存储
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Resource.IResourceStoreProvider.TrySaveResource(System.String,System.String,System.IO.Stream)">
            <summary>
            尝试保存资源
            </summary>
            <param name="name"></param>
            <param name="contentType"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Resource.IResourceStoreProvider.TryGetResource(System.String)">
            <summary>
            尝试获取资源
            </summary>
            <param name="resourceId"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.Resource.IResourceStreamInfo">
            <summary>
            资源流
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Resource.IResourceStreamInfo.Name">
            <summary>
            名称 
            </summary> 
        </member>
        <member name="P:FastFrame.Infrastructure.Resource.IResourceStreamInfo.ContentType">
            <summary>
            资源类型
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Resource.IResourceStreamInfo.ModifyTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.Resource.IResourceStreamInfo.ResourceBlobStream">
            <summary>
            资源流
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Resource.IResourceStreamInfo.ReplaceBlobStream(System.IO.Stream)">
            <summary>
            替换资源
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:FastFrame.Infrastructure.SlideVerificationCreater">
            <summary>
            滑动解锁生成器
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.SlideVerificationCreater.Create(FastFrame.Infrastructure.SlideVerificationInput,System.Int32@)">
            <summary>
            创建图片滑动数据
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.SlideVerificationCreater.ResizeImage(System.DrawingCore.Image,System.Nullable{System.DrawingCore.Size})">
            <summary>
            调整图片大小
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.SlideVerificationCreater.DrawBackground(System.DrawingCore.Bitmap,System.DrawingCore.Bitmap,System.Int32,System.Int32)">
            <summary>
            画背景图并将滑块画上去
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.SlideVerificationCreater.CaptureImage(System.DrawingCore.Bitmap,System.DrawingCore.Bitmap,System.Int32,System.Int32)">
            <summary>
            从大图中根据像素点，生成图片，作为拼图块
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.SlideVerificationCreater.ImageToByteArr(System.DrawingCore.Image,System.DrawingCore.Imaging.ImageFormat)">
            <summary>
            Image转Byte数组
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.SlideVerificationCreater.ImageToBase64(System.Byte[],System.DrawingCore.Imaging.ImageFormat)">
            <summary>
            Image转base64
            </summary>  
        </member>
        <member name="P:FastFrame.Infrastructure.SlideVerificationInput.BackgroundSize">
            <summary>
            背景大小
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.SlideVerificationInput.SlideSize">
            <summary>
            滑块大小
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.SlideVerificationInput.BackgroundStream">
            <summary>
            背景内容
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.SlideVerificationInput.SlideStream">
            <summary>
            滑块内容
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.SlideVerificationOutput.BackgroundImg">
            <summary>
            背景图片base64
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.SlideVerificationOutput.SlideImg">
            <summary>
            滑块图片base64
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.SlideVerificationOutput.PositionY">
            <summary>
            Y轴
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.SlideVerificationOutput.BgHeight">
            <summary>
            背景高
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.SlideVerificationOutput.BgWidth">
            <summary>
            背景宽
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.SlideVerificationOutput.SlideHeight">
            <summary>
            滑块高
            </summary>
        </member>
        <member name="P:FastFrame.Infrastructure.SlideVerificationOutput.SlideWidth">
            <summary>
            滑块宽
            </summary>
        </member>
        <member name="T:FastFrame.Infrastructure.Snowflake">
            <summary>
            动态生产有规律的ID
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.Snowflake.GetTimestamp">
            <summary>
            生成当前时间戳
            </summary>
            <returns>毫秒</returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Snowflake.GetNextTimestamp(System.Int64)">
            <summary>
            获取下一微秒时间戳
            </summary>
            <param name="lastTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.Snowflake.GetId">
            <summary>
            获取长整形的ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.T4Help.GetClassTypes(System.Type)">
            <summary>
            返回所有实体
            </summary>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.T4Help.GetTypeName(System.Type)">
            <summary>
            获取类型名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.T4Help.GenerateNameSpace(System.Type,System.String)">
            <summary>
            生成命名空间
            </summary>
            <param name="type"></param>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.T4Help.GetClassSummary(System.Type,System.String)">
            <summary>
            获取类注释
            </summary>
            <param name="type"></param>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.T4Help.GetPropertySummary(System.Reflection.PropertyInfo,System.String)">
            <summary>
            返回属性注释
            </summary>
            <param name="property"></param>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.TaskCompletionSourceCenter`1">
            <summary>
            异步任务中心
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:FastFrame.Infrastructure.TaskCompletionSourceCenter`1.MakeTaskCompletionSource(System.String)">
            <summary>
            创建任务
            </summary>
            <param name="id"></param> 
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.TaskCompletionSourceCenter`1.DelayTaskCompletionSource(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            等待任务完成
            </summary>
            <param name="id"></param>
            <param name="millisecondsDelay"></param>
            <param name="timeoutErrorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.TaskCompletionSourceCenter`1.SetTaskCompletionSource(System.String,System.Action{System.Threading.Tasks.TaskCompletionSource{`0}})">
            <summary>
            设置任务完成
            </summary>
            <param name="id"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:FastFrame.Infrastructure.VerifyCodeExtended">
            <summary>
            生成验证码
            </summary>
        </member>
        <member name="M:FastFrame.Infrastructure.VerifyCodeExtended.CreateNumberVerifyCode(System.Int32)">
            <summary>
            1.数字验证码
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:FastFrame.Infrastructure.VerifyCodeExtended.CreateAbcVerifyCode(System.Int32)">
            <summary>
            2.字母验证码
            </summary>
            <param name="length">字符长度</param>
            <returns>验证码字符</returns>
        </member>
        <member name="M:FastFrame.Infrastructure.VerifyCodeExtended.CreateMixVerifyCode(System.Int32)">
            <summary>
            3.混合验证码
            </summary>
            <param name="length">字符长度</param>
            <returns>验证码字符</returns>
        </member>
        <member name="M:FastFrame.Infrastructure.VerifyCodeExtended.CreateVerifyCode(FastFrame.Infrastructure.VerifyCodeExtended.VerifyCodeType,System.Int32)">
            <summary>
            产生验证码（随机产生4-6位）
            </summary> 
        </member>
        <member name="M:FastFrame.Infrastructure.VerifyCodeExtended.CreateBitmapByImgVerifyCode(System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            验证码图片 => Bitmap
            </summary>  
        </member>
        <member name="M:FastFrame.Infrastructure.VerifyCodeExtended.CreateByteByImgVerifyCode(System.String,System.Int32,System.Int32)">
            <summary>
            验证码图片 => byte[]
            </summary>
            <param name="verifyCode">验证码</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <returns>byte[]</returns>
        </member>
    </members>
</doc>
